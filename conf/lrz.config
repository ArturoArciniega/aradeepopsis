/*
Copyright (C) 2019-2020 Patrick HÃ¼ther, Niklas Schandry

This file is part of araDeepopsis.
araDeepopsis free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

araDeepopsis is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with araDeepopsis.  If not, see <https://www.gnu.org/licenses/>.
*/

/* Requires miniconda3 module and nextflow > v20.
   This can be created using spack
   $ module load user_spack
   $ spack install miniconda3
   $ spack module tcl refresh miniconda3
   $ spack repo create ~/spack/repos/nextflow
   $ spack create --repo ~/spack/repos/nextflow/ https://github.com/nextflow-io/nextflow/releases/download/v20.07.1/nextflow
   $ spack repo add ~/spack/repos/nextflow/
   $ spack install nextflow@20.07.1
   $ spack module tcl refresh nextflow
   */

/* -------------------------------------------------
 * Nextflow config file for LRZ Linux Cluster (CM2) 
 * -------------------------------------------------
 */

process {
  module = 'miniconda3'
  executor = 'slurm'
  queue = 'cm2_std'
  clusterOptions = "--clusters cm2 --qos cm2_std"
  errorStrategy = { task.exitStatus in [104,134,135,137,139,140,143] ? 'retry' : 'finish' }
  maxRetries = 3

  withName: build_records {
    cpus = { 1 * task.attempt }
    memory = { 1.GB * task.attempt }
    time = { 1.h * task.attempt }
  }
  withName: run_predictions {
    cpus = { 4 * task.attempt }
    memory = { 12.GB * task.attempt }
    time = { 4.h * task.attempt }
  }
  withName: run_predictions_DPP {
    cpus = { 4 * task.attempt }
    memory = { 16.GB * task.attempt }
    time = { 2.h * task.attempt }
  }
  withName: extract_traits {
    cpus = { 1 * task.attempt }
    memory = { 1.GB * task.attempt }
    time = { 1.h * task.attempt }
  }
  withName: draw_diagnostics {
    cpus = { 1 * task.attempt }
    memory = { 2.GB * task.attempt }
    time = { 1.h * task.attempt }
  }
}
